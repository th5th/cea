// Normal distribution.
#ifndef CEA_NORMAL_HPP
#define CEA_NORMAL_HPP

template <typename T>
class rvar_normal : public rvar<T>
{
    public:
        // Constructors
        rvar_normal(prng * src, T m = 10, T s = 5) : source(src)
        {
            set_params(m, s);
        }

        void set_params(T m, T s)
        {
            if(s == 0)
            {
                throw(std::invalid_argument("Stddev in RVarNormal"
                    " must be nonzero."));
            }
            mean = m;
            stddev = std::abs(s);
        }

        void set_source(prng * src)
        {
            source = src;
        }

        // Type dependent implementation.
        T rand()
        {
            return rand_impl(std::is_arithmetic<T>(),
                std::is_floating_point<T>());
        }

    private:
        // Floating-point overload.
        inline T rand_impl(std::true_type, std::true_type)
        {
            return static_cast<T>(ratio_of_uniforms());
        }

        // Integer overload.
        inline T rand_impl(std::true_type, std::false_type)
        {
            double temp = ratio_of_uniforms();
            return static_cast<T>(std::round(temp));
        }

        // Normal variates generated by the Ratio-of-Uniforms method.
        // See Leva, J. L. 1992. "A Fast Normal Random Number Generator"
        inline double ratio_of_uniforms()
        {
            double u, v, x, y, q;
            do
            {
                u = rand_double();
                v = 1.7156 * (rand_double() - 0.5);
                x = u - 0.449871;
                y = std::abs(v) + 0.386595;
                q = x*x + y*(0.19600*y - 0.25472*x);
            } while (q > 0.27597 &&
                (q > 0.27846 || v*v > -4.0*std::log(u)*u*u));

            return static_cast<double>(mean) +
                static_cast<double>(stddev) * (v/u);
        }

        inline double rand_double()
        {
            return 5.42101086242752217E-20 * source->rand();
        }

        // Parameters
        T mean;
        T stddev;

        // PRNG
        prng * source;
};

#endif // CEA_NORMAL_HPP
