// vim: set filetype=cpp:
#ifndef CEA_RANDOM_HPP
#define CEA_RANDOM_HPP

// Base classes and stdlib things.
#include "Core"

// Additional stdlib stuff.
#include <limits>

namespace cea
{
	/*
	   Cea PRNGs
	   All PRNGs are inspired by the work of George Marsaglia
	   and the excellent advice in Numerical Recipes.
	*/

	/*
	   Generator formed from an XOR shift and an MLCG.
	   + Period: ~=1.8 x 10^19 (1x)
	   + Speed: Fast (1x)
	*/
    #include "src/prng/mlcg_xorshift.hpp"

	/*
	   Generator combining an XOR shift with an MWC generator.
	   + Period: ~= 8.5 x 10^37 (~10^19x)
	   + Speed: Medium (~0.8x)
	*/
    #include "src/prng/mwc_xorshift.hpp"

	/*
	   KISS generator formed from 2 XOR shifts,
	   an LCG and an MWC.
	   + Period: ~= 3.1 x 10^57 (~10^38x)
	   + Speed: Slow (~0.6x)
	*/
    #include "src/prng/kiss.hpp"

	// Cea RVars
    #include "src/rvar/uniform.hpp"
    #include "src/rvar/normal.hpp"

#ifdef CEA_DEBUG
	// Debug RVar - testing only.
	template <typename T>
	class rvar_debug : public rvar<T>
	{
		public:
            rvar_debug(std::vector<T> op) : output(op)
            {
                i = 0;
            }

			T rand()
			{
                // Keeps i in range, and increments.
                return output[ (i >= output.size() ? i = 0 : i)++ ];
			}

		private:
			// Fake state stored here.
            std::vector<T> output;
            unsigned int i;
	};
#endif // CEA_DEBUG
}

#endif // CEA_RANDOM_HPP
